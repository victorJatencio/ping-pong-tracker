import React, { useState, useEffect, useMemo } from "react";
import {
  Container,
  Row,
  Col,
  Card,
  Button,
  Badge,
  Table,
  ProgressBar,
} from "react-bootstrap";
import { Link } from "react-router-dom";
import { useAuth } from "../../hooks/useAuth";
import Jumbotron from "../../components/common/Jumbotron";
import UserAvatar from "../../components/common/UserAvatar";
import { Doughnut } from "react-chartjs-2";
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from "chart.js";
import OngoingMatches from "../../components/match/OngoingMatches";
import statsService from "../../services/statsService";
import { db } from "../../config/firebase";
import { collection, getDocs } from "firebase/firestore";

// Register Chart.js components
ChartJS.register(ArcElement, Tooltip, Legend);

const Dashboard = () => {
  const { currentUser } = useAuth();

  // State for real data
  const [dashboardData, setDashboardData] = useState({
    userStats: null,
    recentMatches: [],
    upcomingMatches: [],
    pendingInvitations: [],
    achievements: [],
    leaderboardPreview: [],
    recentActivity: [],
    todaySchedule: [],
    performanceTrends: null,
  });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  // Get user's first name for personalized greeting
  const getFirstName = (user) => {
    if (user?.displayName) {
      return user.displayName.split(" ")[0];
    }
    if (user?.email) {
      return user.email.split("@")[0];
    }
    return "Player";
  };

  const firstName = getFirstName(currentUser);

  // Simplified data loading without complex queries
  useEffect(() => {
    if (!currentUser?.uid) return;

    const loadDashboardData = async () => {
      try {
        setLoading(true);
        setError("");

        console.log("Loading dashboard data for user:", currentUser.uid);

        // Load user statistics
        const userStats = await statsService.getPlayerProfileStats(
          currentUser.uid
        );
        console.log("User stats loaded:", userStats);

        // Load ALL matches and filter in JavaScript (no complex queries)
        const allMatchesSnapshot = await getDocs(collection(db, "matches"));
        const allMatches = [];
        allMatchesSnapshot.forEach((doc) => {
          allMatches.push({ id: doc.id, ...doc.data() });
        });
        console.log("All matches loaded:", allMatches.length);

        // Filter matches for current user
        const userMatches = allMatches.filter(
          (match) =>
            match.player1Id === currentUser.uid ||
            match.player2Id === currentUser.uid
        );
        console.log("User matches found:", userMatches.length);

        // Get recent completed matches
        const completedMatches = userMatches.filter(
          (match) => match.status === "completed"
        );
        const recentMatches = completedMatches
          .sort((a, b) => {
            const dateA = a.completedDate?.toDate() || new Date(0);
            const dateB = b.completedDate?.toDate() || new Date(0);
            return dateB - dateA;
          })
          .slice(0, 3);
        console.log("Recent matches:", recentMatches.length);

        // Get upcoming matches
        const scheduledMatches = userMatches.filter(
          (match) =>
            match.status === "scheduled" || match.status === "in-progress"
        );
        const upcomingMatches = scheduledMatches
          .sort((a, b) => {
            const dateA = a.scheduledDate?.toDate() || new Date();
            const dateB = b.scheduledDate?.toDate() || new Date();
            return dateA - dateB;
          })
          .slice(0, 5);
        console.log("Upcoming matches:", upcomingMatches.length);

        // Load users for opponent names
        const usersSnapshot = await getDocs(collection(db, "users"));
        const usersMap = {};
        usersSnapshot.forEach((doc) => {
          usersMap[doc.id] = { id: doc.id, ...doc.data() };
        });
        console.log("Users loaded:", Object.keys(usersMap).length);

        // Process recent matches with opponent names
        const processedRecentMatches = recentMatches.map((match) => {
          const opponentId =
            match.player1Id === currentUser.uid
              ? match.player2Id
              : match.player1Id;
          const opponent = usersMap[opponentId];
          const isWinner = match.winnerId === currentUser.uid;

          return {
            id: match.id,
            opponent: opponent?.name || opponent?.email || "Unknown",
            result: isWinner ? "Won" : "Lost",
            score: `${match.player1Score}-${match.player2Score}`,
            date: match.completedDate
              ? formatRelativeDate(match.completedDate.toDate())
              : "Recently",
          };
        });

        // Process upcoming matches with opponent names
        const processedUpcomingMatches = upcomingMatches.map((match) => {
          const opponentId =
            match.player1Id === currentUser.uid
              ? match.player2Id
              : match.player1Id;
          const opponent = usersMap[opponentId];

          return {
            id: match.id,
            opponent: opponent?.name || opponent?.email || "Unknown",
            time: match.scheduledDate
              ? formatScheduledTime(match.scheduledDate.toDate())
              : "TBD",
            location: match.location || "TBD",
          };
        });

        // Load leaderboard preview (simplified)
        let leaderboardPreview = [];
        try {
          const leaderboardData = await statsService.calculateLeaderboard();
          leaderboardPreview = leaderboardData
            .slice(0, 3)
            .map((player, index) => ({
              rank: index + 1,
              name:
                player.id === currentUser.uid
                  ? "You"
                  : usersMap[player.id]?.name || "Player",
              wins: player.totalWins || 0,
              isCurrentUser: player.id === currentUser.uid,
            }));
        } catch (leaderboardError) {
          console.log("Leaderboard calculation failed, using fallback");
          // Fallback leaderboard based on user stats
          leaderboardPreview = [
            {
              rank: userStats?.rank || 1,
              name: "You",
              wins: userStats?.totalWins || 0,
              isCurrentUser: true,
            },
          ];
        }

        // Generate achievements based on user stats
        const achievements = generateAchievements(userStats);

        // Generate recent activity
        const recentActivity = generateRecentActivity(
          processedRecentMatches,
          userStats
        );

        // Today's schedule (matches scheduled for today)
        const today = new Date();
        const todaySchedule = processedUpcomingMatches.filter((match) => {
          if (!match.time || match.time === "TBD") return false;
          return match.time.includes("Today");
        });

        console.log("Dashboard data processed successfully");

        setDashboardData({
          userStats,
          recentMatches: processedRecentMatches,
          upcomingMatches: processedUpcomingMatches,
          pendingInvitations: [], // TODO: Implement invitations system
          achievements,
          leaderboardPreview,
          recentActivity,
          todaySchedule,
          performanceTrends: userStats,
        });
      } catch (error) {
        console.error("Error loading dashboard data:", error);
        setError(`Failed to load dashboard data: ${error.message}`);
      } finally {
        setLoading(false);
      }
    };

    loadDashboardData();
  }, [currentUser?.uid]);

  // Helper functions
  const formatRelativeDate = (date) => {
    const now = new Date();
    const diffTime = Math.abs(now - date);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

    if (diffDays === 1) return "Today";
    if (diffDays === 2) return "Yesterday";
    if (diffDays <= 7) return `${diffDays - 1} days ago`;
    return date.toLocaleDateString();
  };

  const formatScheduledTime = (date) => {
    const now = new Date();
    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const matchDate = new Date(
      date.getFullYear(),
      date.getMonth(),
      date.getDate()
    );

    const timeString = date.toLocaleTimeString([], {
      hour: "2-digit",
      minute: "2-digit",
    });

    if (matchDate.getTime() === today.getTime()) {
      return `Today, ${timeString}`;
    } else if (matchDate.getTime() === tomorrow.getTime()) {
      return `Tomorrow, ${timeString}`;
    } else {
      return `${date.toLocaleDateString()}, ${timeString}`;
    }
  };

  const generateAchievements = (userStats) => {
    const achievements = [
      {
        id: 1,
        title: "First Win",
        icon: "bi-star",
        unlocked: (userStats?.totalWins || 0) >= 1,
      },
      {
        id: 2,
        title: "5 Wins",
        icon: "bi-trophy",
        unlocked: (userStats?.totalWins || 0) >= 5,
      },
      {
        id: 3,
        title: "Win Streak",
        icon: "bi-fire",
        unlocked:
          (userStats?.currentStreak || 0) >= 3 &&
          userStats?.streakType === "wins",
      },
      {
        id: 4,
        title: "10 Games",
        icon: "bi-controller",
        unlocked: (userStats?.totalMatches || 0) >= 10,
      },
      {
        id: 5,
        title: "High Win Rate",
        icon: "bi-gem",
        unlocked: (userStats?.winRate || 0) >= 70,
      },
    ];
    return achievements;
  };

  const generateRecentActivity = (recentMatches, userStats) => {
    const activity = [];

    // Add recent match activities
    recentMatches.slice(0, 2).forEach((match, index) => {
      activity.push({
        id: `match_${index}`,
        type: match.result === "Won" ? "match_won" : "match_lost",
        description: `You ${match.result.toLowerCase()} a match against ${
          match.opponent
        }`,
        time: match.date,
        icon: match.result === "Won" ? "bi-trophy-fill" : "bi-x-circle-fill",
        color: match.result === "Won" ? "success" : "danger",
      });
    });

    // Add achievement activity if user has achievements
    if (userStats?.totalWins >= 5) {
      activity.push({
        id: "achievement_5wins",
        type: "achievement",
        description: 'You unlocked the "5 Wins" achievement',
        time: "Recently",
        icon: "bi-star-fill",
        color: "warning",
      });
    }

    // Add ranking activity
    if (userStats?.rank) {
      activity.push({
        id: "ranking",
        type: "leaderboard",
        description: `You are currently ranked #${userStats.rank}`,
        time: "Current",
        icon: "bi-bar-chart-fill",
        color: "info",
      });
    }

    return activity.slice(0, 4);
  };

  // Use real data or fallback to loading/empty states
  const {
    userStats,
    recentMatches,
    upcomingMatches,
    pendingInvitations,
    achievements,
    leaderboardPreview,
    recentActivity,
    todaySchedule,
    performanceTrends,
  } = dashboardData;

  // Win/Loss ratio chart data
  const chartData = useMemo(() => {
    if (!userStats || (!userStats.totalWins && !userStats.totalLosses))
      return null;

    return {
      labels: ["Wins", "Losses"],
      datasets: [
        {
          data: [userStats.totalWins || 0, userStats.totalLosses || 0],
          backgroundColor: ["#28a745", "#dc3545"],
          borderColor: ["#ffffff", "#ffffff"],
          borderWidth: 3,
          hoverBackgroundColor: ["#34ce57", "#e55353"],
        },
      ],
    };
  }, [userStats]);

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        callbacks: {
          label: function (context) {
            const label = context.label || "";
            const value = context.parsed;
            const total = context.dataset.data.reduce((a, b) => a + b, 0);
            const percentage =
              total > 0 ? Math.round((value / total) * 100) : 0;
            return `${label}: ${value} (${percentage}%)`;
          },
        },
      },
    },
    cutout: "60%",
  };

  const handleAcceptInvitation = (invitationId) => {
    console.log("Accept invitation:", invitationId);
  };

  const handleDeclineInvitation = (invitationId) => {
    console.log("Decline invitation:", invitationId);
  };

  if (loading) {
    return (
      <div className="dashboard-page">
        <Jumbotron
          title={`Welcome back, ${firstName}!`}
          subtitle="Loading your dashboard..."
          backgroundImage="https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80"
          height="300px"
          overlay={true}
          textAlign="left"
          fullWidth={true}
        />
        <div className="jumbotron-overlap-container">
          <Container className="py-5">
            <div className="text-center">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
              <p className="mt-3 text-muted">Loading your dashboard data...</p>
            </div>
          </Container>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="dashboard-page">
        <Jumbotron
          title={`Welcome back, ${firstName}!`}
          subtitle="There was an error loading your dashboard"
          backgroundImage="https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80"
          height="300px"
          overlay={true}
          textAlign="left"
          fullWidth={true}
        />
        <div className="jumbotron-overlap-container">
          <Container className="py-5">
            <div className="alert alert-danger text-center">
              <h5>Error Loading Dashboard</h5>
              <p>{error}</p>
              <Button
                variant="primary"
                onClick={() => window.location.reload()}
              >
                Try Again
              </Button>
            </div>
          </Container>
        </div>
      </div>
    );
  }

  return (
    <div className="dashboard-page">
      {/* Hero Jumbotron */}
      <Jumbotron
        title={`Welcome back, ${firstName}!`}
        subtitle={`You have ${pendingInvitations.length} pending match invitations and ${upcomingMatches.length} upcoming matches`}
        backgroundImage="https://images.unsplash.com/photo-1551698618-1dfe5d97d256?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80"
        height="300px"
        overlay={true}
        textAlign="left"
        fullWidth={true}
      />

      {/* Dashboard Content with Overlap Effect */}
      <div className="jumbotron-overlap-container">
        <Container className="py-5">
          {/* First Row - Main Stats Cards */}
          <Row className="mb-4">
            {/* Win/Loss Ratio Card */}
            <Col lg={4}>
              <Card className="text-center stat-card h-100">
                <Card.Header>
                  <h5 className="mb-0">Win/Loss Ratio</h5>
                </Card.Header>
                <Card.Body>
                  {chartData && userStats ? (
                    <>
                      <div style={{ height: "200px", position: "relative" }}>
                        <Doughnut data={chartData} options={chartOptions} />
                        <div className="chart-center-text">
                          <h3 className="text-success mb-0">
                            {userStats.winRate || 0}%
                          </h3>
                          <small className="text-muted">Win Rate</small>
                        </div>
                      </div>
                      <div className="mt-3">
                        <div className="d-flex justify-content-between">
                          <span className="text-success">
                            <i className="bi bi-circle-fill me-1"></i>
                            Wins: {userStats.totalWins || 0}
                          </span>
                          <span className="text-danger">
                            <i className="bi bi-circle-fill me-1"></i>
                            Losses: {userStats.totalLosses || 0}
                          </span>
                        </div>
                      </div>
                    </>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-pie-chart fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No match data yet</p>
                      <small className="text-muted">
                        Play some matches to see your stats!
                      </small>
                    </div>
                  )}
                </Card.Body>
              </Card>
            </Col>

            {/* Recent Matches Card */}
            <Col lg={4}>
              <Card className="h-100">
                <Card.Header>
                  <h5 className="mb-0">Recent Matches</h5>
                </Card.Header>
                <Card.Body>
                  {recentMatches.length > 0 ? (
                    <div className="list-group list-group-flush">
                      {recentMatches.map((match) => (
                        <div
                          key={match.id}
                          className="list-group-item border-0 px-0 py-2"
                        >
                          <div className="d-flex justify-content-between align-items-center">
                            <div className="d-flex align-items-center">
                              <UserAvatar
                                user={{ displayName: match.opponent }}
                                size={32}
                                className="me-2"
                              />
                              <div>
                                <h6 className="mb-0">vs. {match.opponent}</h6>
                                <small className="text-muted">
                                  {match.date}
                                </small>
                              </div>
                            </div>
                            <div className="text-end">
                              <Badge
                                bg={
                                  match.result === "Won" ? "success" : "danger"
                                }
                                className="mb-1"
                              >
                                {match.result}
                              </Badge>
                              <div>
                                <small className="fw-bold">{match.score}</small>
                              </div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-controller fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No recent matches</p>
                    </div>
                  )}
                </Card.Body>
                <Card.Footer>
                  <Link to="/history" className="text-decoration-none">
                    View All Matches <i className="bi bi-arrow-right"></i>
                  </Link>
                </Card.Footer>
              </Card>
            </Col>

            {/* Achievements Card */}
            <Col lg={4}>
              <Card className="text-center h-100">
                <Card.Header>
                  <h5 className="mb-0">Achievements</h5>
                </Card.Header>
                <Card.Body>
                  <Row className="g-3">
                    {achievements.slice(0, 3).map((achievement) => (
                      <Col key={achievement.id} xs={4}>
                        <div className="achievement-item">
                          <div
                            className={`achievement-icon ${
                              achievement.unlocked ? "unlocked" : "locked"
                            }`}
                          >
                            <i className={`${achievement.icon} fs-2`}></i>
                          </div>
                          <small className="d-block mt-2 fw-bold">
                            {achievement.title}
                          </small>
                        </div>
                      </Col>
                    ))}
                  </Row>
                  <div className="mt-3">
                    {userStats && (
                      <ProgressBar
                        now={Math.min(
                          ((userStats.totalMatches || 0) / 10) * 100,
                          100
                        )}
                        label={`${Math.min(
                          ((userStats.totalMatches || 0) / 10) * 100,
                          100
                        ).toFixed(0)}% to "10 Games"`}
                        className="achievement-progress"
                      />
                    )}
                  </div>
                </Card.Body>
                <Card.Footer>
                  <Link to="/profile" className="text-decoration-none">
                    View All Achievements <i className="bi bi-arrow-right"></i>
                  </Link>
                </Card.Footer>
              </Card>
            </Col>
          </Row>

          {/* Second Row - Activity Cards */}
          <Row className="mb-4">
            {/* Upcoming Matches Card */}
            <Col lg={4}>
              <Card className="h-100">
                <Card.Header>
                  <h5 className="mb-0">Upcoming Matches</h5>
                </Card.Header>
                <Card.Body>
                  {upcomingMatches.length > 0 ? (
                    <div className="list-group list-group-flush">
                      {upcomingMatches.slice(0, 3).map((match) => (
                        <div
                          key={match.id}
                          className="list-group-item border-0 px-0 py-2"
                        >
                          <div className="d-flex justify-content-between align-items-center">
                            <div className="d-flex align-items-center">
                              <UserAvatar
                                user={{ displayName: match.opponent }}
                                size={32}
                                className="me-2"
                              />
                              <div>
                                <h6 className="mb-0">vs. {match.opponent}</h6>
                                <small className="text-muted">
                                  {match.time}
                                </small>
                              </div>
                            </div>
                            <Button variant="outline-primary" size="sm">
                              <i className="bi bi-calendar-event"></i>
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-calendar-x fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No upcoming matches</p>
                    </div>
                  )}
                </Card.Body>
                <Card.Footer>
                  <Link to="/matches" className="text-decoration-none">
                    View All Matches <i className="bi bi-arrow-right"></i>
                  </Link>
                </Card.Footer>
              </Card>
            </Col>

            {/* Pending Invitations Card */}
            <Col lg={4}>
              <Card className="h-100">
                <Card.Header>
                  <h5 className="mb-0">Pending Invitations</h5>
                </Card.Header>
                <Card.Body>
                  {pendingInvitations.length > 0 ? (
                    <div className="list-group list-group-flush">
                      {pendingInvitations.map((invitation) => (
                        <div
                          key={invitation.id}
                          className="list-group-item border-0 px-0 py-2"
                        >
                          <div className="d-flex justify-content-between align-items-center">
                            <div className="d-flex align-items-center">
                              <UserAvatar
                                user={{ displayName: invitation.from }}
                                size={32}
                                className="me-2"
                              />
                              <div>
                                <h6 className="mb-0">from {invitation.from}</h6>
                                <small className="text-muted">
                                  {invitation.time}
                                </small>
                              </div>
                            </div>
                            <div className="d-flex gap-1">
                              <Button
                                variant="success"
                                size="sm"
                                onClick={() =>
                                  handleAcceptInvitation(invitation.id)
                                }
                              >
                                <i className="bi bi-check"></i>
                              </Button>
                              <Button
                                variant="danger"
                                size="sm"
                                onClick={() =>
                                  handleDeclineInvitation(invitation.id)
                                }
                              >
                                <i className="bi bi-x"></i>
                              </Button>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-envelope fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No pending invitations</p>
                    </div>
                  )}
                </Card.Body>
                <Card.Footer>
                  <Link to="/matches" className="text-decoration-none">
                    Manage Invitations <i className="bi bi-arrow-right"></i>
                  </Link>
                </Card.Footer>
              </Card>
            </Col>

            {/* Leaderboard Preview Card */}
            <Col lg={4}>
              <Card className="h-100">
                <Card.Header>
                  <h5 className="mb-0">Leaderboard Preview</h5>
                </Card.Header>
                <Card.Body>
                  {leaderboardPreview.length > 0 ? (
                    <div className="list-group list-group-flush">
                      {leaderboardPreview.map((player) => (
                        <div
                          key={player.rank}
                          className="list-group-item border-0 px-0 py-2"
                        >
                          <div className="d-flex justify-content-between align-items-center">
                            <div className="d-flex align-items-center">
                              <Badge
                                bg={
                                  player.rank === 1
                                    ? "warning"
                                    : player.rank === 2
                                    ? "secondary"
                                    : "dark"
                                }
                                className="me-2"
                              >
                                #{player.rank}
                              </Badge>
                              <UserAvatar
                                user={{ displayName: player.name }}
                                size={32}
                                className="me-2"
                              />
                              <div>
                                <h6
                                  className={`mb-0 ${
                                    player.isCurrentUser
                                      ? "text-primary fw-bold"
                                      : ""
                                  }`}
                                >
                                  {player.name}
                                </h6>
                                <small className="text-muted">
                                  {player.wins} wins
                                </small>
                              </div>
                            </div>
                            {player.rank === 1 && (
                              <i className="bi bi-trophy-fill text-warning"></i>
                            )}
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-bar-chart fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No leaderboard data</p>
                    </div>
                  )}
                </Card.Body>
                <Card.Footer>
                  <Link to="/leaderboard" className="text-decoration-none">
                    View Full Leaderboard <i className="bi bi-arrow-right"></i>
                  </Link>
                </Card.Footer>
              </Card>
            </Col>
          </Row>

          {/* Third Row - Tables and Additional Info */}
          <Row className="mb-4">
            {/* Recent Activity Table */}
            <Col lg={12}>
              <Card className="h-100">
                <Card.Header>
                  <h5 className="mb-0">Recent Activity</h5>
                </Card.Header>
                <Card.Body>
                  {recentActivity.length > 0 ? (
                    <Table responsive hover>
                      <tbody>
                        {recentActivity.map((activity) => (
                          <tr key={activity.id}>
                            <td className="border-0 py-3">
                              <div className="d-flex align-items-center">
                                <div
                                  className={`activity-icon bg-${activity.color} text-white rounded-circle d-flex align-items-center justify-content-center me-3`}
                                  style={{ width: "40px", height: "40px" }}
                                >
                                  <i className={activity.icon}></i>
                                </div>
                                <div>
                                  <div className="fw-bold">
                                    {activity.description}
                                  </div>
                                  <small className="text-muted">
                                    {activity.time}
                                  </small>
                                </div>
                              </div>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </Table>
                  ) : (
                    <div className="text-center py-4">
                      <i className="bi bi-clock-history fs-1 text-muted d-block mb-2"></i>
                      <p className="text-muted mb-0">No recent activity</p>
                    </div>
                  )}
                </Card.Body>
              </Card>
            </Col>
          {/* Fourth Row - Ongoing Matches (Existing Component) */}
            <Col lg={12}>
              <OngoingMatches />
            </Col>
          </Row>
        </Container>
      </div>
    </div>
  );
};

export default Dashboard;
